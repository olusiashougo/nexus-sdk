# Release process for the Nexus SDK:
#
# * checks for a Git Tag in the format v*
# * builds artifacts (archives, installers, hashes)
# * uploads artifacts to workflow
# * on success, uploads the artifacts to a GitHub Release
#
# The GitHub Release will be created with a generated
# title/body based on the changelog.

name: Release

# This task will run whenever you push a git tag that looks like a version
# like "v1.0.0", "v0.1.0-alpha.1"
#
# If there's a prerelease-style suffix to the version, then the release(s)
# will be marked as a prerelease.
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

  workflow_dispatch:
    inputs:
      release:
        description: "Create a release"
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CARGO_BUILD_JOBS: 1
  CARGO_INCREMENTAL: 0
  CLICOLOR: 1
  RUSTFLAGS: >
    -C codegen-units=1

jobs:
  cli:
    name: ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            deb: true
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.target }}
      cancel-in-progress: ${{ !startsWith(github.ref, 'refs/tags/v') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: Cargo.toml
          field: workspace.package.version

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Install build dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt install -y libssl-dev musl-tools pkg-config

      - name: Cache Build
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --package=nexus-cli --release --locked --target=${{ matrix.target }} $BUILD_STD

      - name: Install cargo-deb
        uses: taiki-e/install-action@v2
        if: ${{ matrix.deb == true }}
        with:
          tool: cargo-deb

      - name: Build deb
        if: ${{ matrix.deb == true }}
        run: cargo deb --package=nexus-cli --no-build --output=. --target=${{ matrix.target }}

      - name: Package
        run: |
          tar -cv CHANGELOG.md LICENSE.txt README.md \
            -C target/${{ matrix.target }}/release/ nexus |
            gzip --best > \
            nexus-cli-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            *.deb
            *.tar.gz
            *.zip

      - name: Create release
        if: github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true')
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ github.ref != format('refs/tags/v{0}', steps.get_version.outputs.value) }}
          draft: true
          files: |
            *.deb
            *.tar.gz
            *.zip
          generate_release_notes: true
